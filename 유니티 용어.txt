유니티 프로그램

RigidBody: 물리효과를 받기 위한 컴포넌트 가지게되면 중력의 효과를 받음

Colider ->Collider : 물리효과를 받기 위한 컴포넌트

Rigidbody -> Mess : 무게, 수치가 높을수록 충돌이 무거워짐

Rigidbody -> Is Kinematic : 외부 물리효과 무시

재질 편집은 새로 생성해야 가능

Material -> Tiling : 텍스쳐 반복 타일 개수

Material -> Emission : 텍스쳐 발광(밝기)조절

Physics Material : 탄성과 마찰을 다루는 물리적인 재질

Friction : 마찰력, 낮을수록 많이 미끄러짐
	Combine :  다음 마찰력을 계산하는 방식 

오브젝트의 재질접근은 MeshRenderer을 통해서 한다




물체 필수 요소 :Mesh, Material, Collider, RigidBody


c# Velocity :현재이동속도

c# Rigid 관련 함수는 FixedUpdated에 작성하도록 권장된다

c# AddForce(Vec) : Vec의 방향과 크기로 힘을 줌 , Mess의 무게의 영향을 받는다
c# rigid.AddTorque: 회전력

c#
//실제 물리적인 충돌로 발생하는 이벤트
    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.name == "Sphere")
            mat.color = new Color(0, 0, 0);
    }
    private void OnCollisionStay(Collision collision)
    {

    }
    private void OnCollisionExit(Collision collision)
    {
        if (collision.gameObject.name == "Sphere")
            mat.color = new Color(1, 0, 0);
//

 UI ->Canvas : UI가 그려지는 도화지 욕활인 컴포넌트

    }

    //콜라이더 충돌로 발생하는 이벤트
    private void OnTriggerEnter(Collider other)
    {
        
    }
    private void OnTriggerStay(Collider other)
    {
        
    }
    private void OnTriggerExit(Collider other)
    {
        
    }

public void Jump()
    {
        rigid.AddForce(Vector3.up * 20, ForceMode.Impulse);
    } //이렇게 해놓고 앵커 참조하면 버튼같은게 접근 가능


SetActive(bool) :오브젝트 활성화 함수 ex) gameObject.SetActive(false); //gameObject : 자기자신

카메라 움직임 같은경우는 LateUdate()를 쓰는게 일반적

FindGameObjectWithTag() : 주어진 태그로 오브젝트 검색